#+TITLE: Continuous Deployment with Jenkins Pipeline
#+AUTHOR: Luke Amdor
#+EMAIL: @rubbish / luke.amdor@gmail.com
#+OPTIONS: toc:nil num:nil 
#+OPTIONS: reveal_history:t reveal_control:t reveal_center:t
#+REVEAL_MIN_SCALE: 1.2
#+REVEAL_MAX_SCALE: 1.5
#+REVEAL_HLEVEL: 1
#+REVEAL_ROOT: file:////Users/luke/code/presentations/reveal.js

* Prerequisites
Pretty much following https://cloud.google.com/solutions/jenkins-on-container-engine-tutorial

** Start up a GKE cluster
*** Create the project

#+BEGIN_SRC bash :results output
gcloud projects create rubbish-cijug --set-as-default
#+END_SRC

and have to go to https://console.cloud.google.com/compute/instances?project=rubbish-cijug to enable billing for the new project and start compute engine

#+RESULTS:

*** Create the GKE cluster
#+BEGIN_SRC bash :results output
gcloud compute networks create rubbish-cijug --mode auto

gcloud container clusters create rubbish-cijug \
  --network rubbish-cijug \
  --scopes "https://www.googleapis.com/auth/projecthosting,storage-rw"
#+END_SRC

#+RESULTS:
#+begin_example
NAME           MODE  IPV4_RANGE  GATEWAY_IPV4
rubbish-cijug  auto
NAME           ZONE           MASTER_VERSION  MASTER_IP      MACHINE_TYPE   NODE_VERSION  NUM_NODES  STATUS
rubbish-cijug  us-central1-a  1.5.6           104.154.52.49  n1-standard-1  1.5.6         3          RUNNING
#+end_example

#+BEGIN_SRC bash :results output :async
gcloud container clusters list
#+END_SRC

#+RESULTS:
#+begin_example
NAME           ZONE           MASTER_VERSION  MASTER_IP      MACHINE_TYPE   NODE_VERSION  NUM_NODES  STATUS
rubbish-cijug  us-central1-a  1.5.6           104.154.52.49  n1-standard-1  1.5.6         3          RUNNING
#+end_example

*** Get kubectl credentials 
#+BEGIN_SRC bash :results output
gcloud container clusters get-credentials rubbish-cijug
#+END_SRC

#+RESULTS:

#+BEGIN_SRC bash :results output
kubectl cluster-info
#+END_SRC

#+RESULTS:
#+begin_example
Kubernetes master is running at https://104.154.52.49
GLBCDefaultBackend is running at https://104.154.52.49/api/v1/proxy/namespaces/kube-system/services/default-http-backend
Heapster is running at https://104.154.52.49/api/v1/proxy/namespaces/kube-system/services/heapster
KubeDNS is running at https://104.154.52.49/api/v1/proxy/namespaces/kube-system/services/kube-dns
kubernetes-dashboard is running at https://104.154.52.49/api/v1/proxy/namespaces/kube-system/services/kubernetes-dashboard

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
#+end_example
*** Create the jenkins disk
#+BEGIN_SRC bash :results output :async
gcloud compute images create jenkins-home-image --source-uri https://storage.googleapis.com/solutions-public-assets/jenkins-cd/jenkins-home-v3.tar.gz
#+END_SRC

#+RESULTS:
#+begin_example
NAME                PROJECT        FAMILY  DEPRECATED  STATUS
jenkins-home-image  rubbish-cijug                      READY
#+end_example

#+BEGIN_SRC bash :results output :async
gcloud compute disks create jenkins-home --image jenkins-home-image --zone us-central1-a
#+END_SRC

#+RESULTS:
#+begin_example
NAME          ZONE           SIZE_GB  TYPE         STATUS
jenkins-home  us-central1-a  10       pd-standard  READY
#+end_example
** Deploy jenkins master onto it
*** create jenkins ns

#+BEGIN_SRC bash :results output
kubectl create ns jenkins
#+END_SRC

#+RESULTS:
#+begin_example
namespace "jenkins" created
#+end_example

*** create jenkins admin password secret
#+BEGIN_SRC bash :results output
PASSWORD=`openssl rand -base64 15`; echo "Your password is $PASSWORD"; sed -i.bak s#CHANGE_ME#$PASSWORD# jenkins/k8s/options
#+END_SRC

#+RESULTS:
#+begin_example
Your password is awR2X5II+jegKWDMZ5kC
#+end_example

#+BEGIN_SRC bash :results output
kubectl create secret generic jenkins --from-file=jenkins/k8s/options --namespace=jenkins
#+END_SRC

#+RESULTS:
#+begin_example
secret "jenkins" created
#+end_example
*** deploy
#+BEGIN_SRC bash :results output
kubectl apply -f jenkins/k8s/
#+END_SRC

#+RESULTS:
#+begin_example
deployment "jenkins" configured
service "jenkins-ui" configured
service "jenkins-discovery" configured
#+end_example

#+BEGIN_SRC bash :results output
kubectl get pods --namespace jenkins
#+END_SRC

#+RESULTS:
#+begin_example
NAME                       READY     STATUS    RESTARTS   AGE
jenkins-3925258115-xkmdp   0/1       Running   0          1m
#+end_example

#+BEGIN_SRC bash :results output
kubectl get services --namespace jenkins
#+END_SRC

#+RESULTS:
#+begin_example
NAME                CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
jenkins-discovery   10.115.252.180   <none>        50000/TCP        2m
jenkins-ui          10.115.251.100   <nodes>       8080:31465/TCP   2m
#+end_example

*** setup load balancer
#+BEGIN_SRC bash :results output
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls.key -out /tmp/tls.crt -subj "/CN=jenkins/O=jenkins"
#+END_SRC

#+RESULTS:

#+BEGIN_SRC bash :results output
kubectl create secret generic tls --from-file=/tmp/tls.crt --from-file=/tmp/tls.key --namespace jenkins
#+END_SRC

#+RESULTS:
#+begin_example
secret "tls" created
#+end_example

#+BEGIN_SRC bash :results output
kubectl apply -f jenkins/k8s/lb/ingress.yaml
#+END_SRC

#+RESULTS:
#+begin_example
ingress "jenkins" created
#+end_example

#+BEGIN_SRC bash :results output :async
kubectl describe ingress jenkins --namespace jenkins
#+END_SRC

#+RESULTS:
#+begin_example
Name:			jenkins
Namespace:		jenkins
Address:		35.190.3.108
Default backend:	jenkins-ui:8080 (10.112.2.3:8080)
TLS:
  tls terminates 
Rules:
  Host	Path	Backends
  ----	----	--------
  *	* 	jenkins-ui:8080 (10.112.2.3:8080)
Annotations:
  https-forwarding-rule:	k8s-fws-jenkins-jenkins--f00799e17716018c
  https-target-proxy:		k8s-tps-jenkins-jenkins--f00799e17716018c
  target-proxy:			k8s-tp-jenkins-jenkins--f00799e17716018c
  url-map:			k8s-um-jenkins-jenkins--f00799e17716018c
  backends:			{"k8s-be-31465--f00799e17716018c":"HEALTHY"}
  forwarding-rule:		k8s-fw-jenkins-jenkins--f00799e17716018c
  ssl-cert:			k8s-ssl-jenkins-jenkins--f00799e17716018c
  static-ip:			k8s-fw-jenkins-jenkins--f00799e17716018c
Events:
  FirstSeen	LastSeen	Count	From			SubObjectPath	Type		Reason	Message
  ---------	--------	-----	----			-------------	--------	------	-------
  3m		3m		1	loadbalancer-controller			Normal		ADD	jenkins/jenkins
  1m		1m		1	loadbalancer-controller			Normal		CREATE	ip: 35.190.3.108
  1m		8s		5	loadbalancer-controller			Normal		Service	default backend set to jenkins-ui:31465
#+end_example
** Setup kubectl tool in Jenkins manager
** Plugins
*** Update plugins in plugin manager
*** add more plugins
- ansi color
- slack
- custom tools
- blue ocean
*** Setup sbt
**** install sbt plugin
**** setup sbt tool
** add docker registry secret

#+BEGIN_SRC bash :results output
kubectl create secret generic docker-config-json --namespace=jenkins --from-file=$HOME/.docker/config.json
#+END_SRC

#+RESULTS:
#+begin_example
secret "docker-config-json" created
#+end_example
*** add to jenkins pod template as secret volume
** add env namespaces
#+BEGIN_SRC bash :results output
kubectl create ns staging
kubectl create ns production
#+END_SRC

#+RESULTS:
#+begin_example
namespace "staging" created
namespace "production" created
#+end_example
** Setup Github 
*** setup Github server with new personal access token creds as username/password
*** setup jenkins public url
*** make sure that it can manage hooks
*** setup github-id-rsa cred file with ssh private key
** setup an agent in jenkins
*** in jenkins ui, setup jnlp-persistent agent
*** run in jenkins

#+BEGIN_SRC bash :results output :async
kubectl apply -f jenkins/k8s/agent/jnlp.yaml
#+END_SRC

#+RESULTS:
#+begin_example
pod "jnlp-persistent" created
#+end_example


#+BEGIN_SRC bash :results output :async
kubectl get pods --namespace=jenkins
#+END_SRC

#+RESULTS:
#+begin_example
NAME                       READY     STATUS              RESTARTS   AGE
jenkins-3925258115-xkmdp   1/1       Running             0          21m
jnlp-persistent            0/1       ContainerCreating   0          3s
#+end_example

* A history of Jenkins jobs
** Freestyle job
** Multijob
** Pipeline
** So how did I get here?
* Jenkinsfile
** 
#+BEGIN_QUOTE
Jenkins Pipeline is a suite of plugins which supports implementing and integrating continuous delivery pipelines into Jenkins. Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines "as code" via the Pipeline DSL.

Typically, this "Pipeline as Code" would be written to a =Jenkinsfile= and checked into a projectâ€™s source control repository,
#+END_QUOTE
** Simple commands

- =echo=
- =sh=
- =dir=
- =stage=
- =node=
- =input=

** All groovy

With a catch... It all has to be serializable.

- Since jenkins can pause the pipeline

** Since just groovy

- =try { ... } catch { ... } finally { ... }=
- =if { ... } else { ... }=
- =def blah()= 
- ="hello ${name}"=

** More commands

- =git= / =svn= / =cvs=
- =timeout=
- =tool=
- =readFile=
- =writeFile=
- =catchError=
- =waitUntil=
- =retry=

** Commands added by plugins

Plenty more at https://jenkins.io/doc/pipeline/steps/

- =slackSend=
- =ansiColor=
- =junit=

*** can always be checked out via Pipeline Reference in a job

** Variables in scope

- =scm=
- =currentBuild=
- =ENV=
- =params=

** Shared libraries

Can setup a repository to share groovy code between jobs

** Can be checked in to SCM

*Pipeline as code!*

** Declarative pipeline
*NEW*

adds =pipeline= to your Jenkinsfile
* The App
- simple scala app
- just outputs the current version of app
** Deployment
- running this in kubernetes
- two different namespaces
  - staging
  - production
*** deploy k8s resources to staging ns
#+BEGIN_SRC bash :results output
kubectl apply -f k8s/ --namespace staging
#+END_SRC

#+RESULTS:
#+begin_example
service "cijug-hello" created
deployment "cijug-hello" created
#+end_example

** Release
- update version files
- update k8s deployment image to version
- git tag
- build image
- push
* Github Multibranch
Jenkins automatically discovers branches and pull requests.
Creates jobs for each!
** 
**But I have all these pull requests!**
** create a a job for our cijug-jenkinsfile repo
- need to disable cert verification in the github settings!
* Continuous Deployment
** The pipeline
- Run tests
- Release (build image and tag)
- Deploy to staging automatically
- Ask if we want to deploy to prod
- Deploy to production
** Code
** Concurrent pipelines

- =lock=
- =milestone=
* Extras
** Tips and tricks
*** 
#+BEGIN_SRC groovy
currentBuild.displayName = releasedVersion
#+END_SRC
*** 
#+BEGIN_SRC groovy
timeout(time: 7, unit: "days") {
  slackSend("Hey, authorize the deployment!")
  milestone()
  input("Promote to UAT?")
}
#+END_SRC
*** use groovy closures
#+BEGIN_SRC groovy
def preparedTerraformNode(Closure body) {
  node("agent") {
    sh "go get ..."
    sh "go get ..."
    sh "go get ..."
    body()
  }
}
#+END_SRC
** Blue Ocean
** Blue Green Deployments
** Smoke testing
** Canary
* Cleanup
